name: Build, Test & Publish

on:
  push:
    branches: [main]

jobs:
  api:
    runs-on: ubuntu-latest

    env:
      DOCKER_BUILDKIT: 1

    steps:
      - uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@369eb591f429131d6889c46b94e711f089e6ca96
        with:
          images: |
            ndolestudio/httpmock
            ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=latest
            type=raw,value=main

      - name: Build and push docker image
        uses: docker/build-push-action@48aba3b46d1b1fec4febb7c5d0c644b249a11355
        with:
          context: ./api
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: APP_VERSION=${{ github.sha }}
        if: github.event_name != 'pull_request'

      - name: Docker Hub Description
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
          repository: ndolestudio/httpmock
          readme-filepath: ./README.md
        if: github.event_name != 'pull_request'

  web:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./web
    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        with:
          version: 10
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies üì¶
        run: pnpm install

      - name: Run linter üëÄ
        run: pnpm run lint

      - name: Setup .env file
        run: mv .env.production .env

      - name: Build üèóÔ∏è
        run: pnpm run build
        env:
          REACT_APP_SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          REACT_APP_ENV: production
          REACT_APP_COMMIT_HASH: ${{ github.sha }}
          REACT_APP_BACKEND_BASE_URL: https://api.httpmock.dev

      - name: Deploy üöÄ
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          command: pages deploy web/out --project-name=httpmock-cloud

      - name: Create Sentry Release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          environment: production
          projects: ${{ secrets.SENTRY_PROJECT }}
          sourcemaps: web/out
          version: ${{ github.sha }}
